

{-
    Storage
    owner_address:MsgAddressInt
    recipient_address:MsgAddressInt
    unlocked_at:uint64
    jetton_balances:dict[
        wallet_address:uint256$
            amount:Coins
    ]
-}

#include "imports/stdlib.fc";
#include "imports/constants.fc";
#include "imports/storage.fc";


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    (int sender_wc, int sender_hashpart) = parse_std_addr(sender_address);
    throw_unless(333, sender_wc == workchain); ;; force chain

    if (flags & 1) { ;; bounced messages
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::lockup_data) { ;; drop stored lockup data
        send_raw_message(
            begin_cell()
                .store_uint(0x10, 6)
                .store_slice(storage::owner_address)
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(get_data())
                .end_cell(),
            64
        );
        return ();
    }

    load_data();

    if (op == op::transfer_notification) {
        if (storage::jetton_balances.cell_depth() <= 10) { ;; dict overgas protection
            (slice vs, int found?) = storage::jetton_balances.udict_get?(256, sender_hashpart);
            int stored_value = found? ? vs~load_coins() : 0;
            stored_value += in_msg_body~load_coins();

            storage::jetton_balances~udict_set_builder(
                256, sender_hashpart,
                begin_cell()
                    .store_coins(stored_value)
            );
            save_data();
        }
        return ();
    }

    if (op == op::edit_owner) {
        throw_unless(401, equal_slices(sender_address, storage::owner_address));
        storage::owner_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }
    if (op == op::edit_receiver) {
        throw_unless(401, equal_slices(sender_address, storage::receiver_address));
        storage::receiver_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }
    if (op == op::extend_lock) {
        throw_unless(401, equal_slices(sender_address, storage::owner_address));
        int extension_time = in_msg_body~load_uint(64);
        storage::unlocked_at += extension_time;
        save_data();
        return ();
    }
    if (op == op::excesses) { return (); }
    if (op == op::withdraw) {
        throw_unless(401, equal_slices(sender_address, storage::receiver_address));
        throw_unless(402, storage::unlocked_at <= now());

        while (in_msg_body.slice_refs()) {
            var msg = in_msg_body~load_ref().begin_parse();
            slice target_address = msg~load_msg_addr();
            (int target_wc, int target_hashpart) = parse_std_addr(target_address);
            int amount = msg~load_coins();
            cell msg_body = msg.slice_refs() > 0 ? msg~load_ref() : null();
            (slice vs, int found?) = storage::jetton_balances.udict_get?(256, target_hashpart);
            if (found? & (~ null?(msg_body))) {
                slice ms = msg_body.begin_parse();
                int op = ms~load_uint(32);
                if ((op == op::transfer) | (op == op::burn)) {
                    msg~skip_bits(64);
                    int amount = msg~load_coins();
                    int stored_amount = vs~load_coins();
                    amount = max(stored_amount - amount, 0);

                    storage::jetton_balances~udict_set_builder(
                        256, target_hashpart,
                        begin_cell()
                            .store_coins(amount)
                    );
                }
            }

            builder msg = begin_cell()
                .store_uint(0x18, 6) ;; bounce message
                .store_slice(target_address)
                .store_coins(amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1);

            if (~ null?(msg_body)) {
                msg = msg.store_uint(1, 1).store_ref(msg_body);
            } else {
                msg = msg.store_uint(0, 1);
            }

            send_raw_message(msg.end_cell(), 0);
        }

        save_data();
        return ();
    }

    return ();

}

;; GET methods

(slice, slice, int, cell) lockup_data() method_id {
    load_data();
    return (
        storage::owner_address,
        storage::receiver_address,
        storage::unlocked_at,
        storage::jetton_balances
    );
}

